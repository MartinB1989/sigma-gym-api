// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  STAFF
  MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PENDING
  CANCELLED
}

enum WeekDay {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO
}

// Modelos
model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  dni           String
  role          Role          @default(MEMBER)
  phoneNumber   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  attendances   Attendance[]
}

model ClassName {
  id          String       @id @default(uuid())
  name        String
  description String?
  capacity    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  services    Service[]    @relation("ClassNameToService")
  schedules   ClassSchedule[]
  attendances Attendance[]
}

model Service {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  classes     ClassName[]  @relation("ClassNameToService")
  plans       Plan[]       @relation("ServiceToPlan")
}

model Plan {
  id           String         @id @default(uuid())
  name         String
  description  String?
  price        Float
  duration     Int           // duración en días
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  services     Service[]      @relation("ServiceToPlan")
  subscriptions Subscription[]
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String
  planId    String
  startDate DateTime
  endDate   DateTime
  status    SubscriptionStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User              @relation(fields: [userId], references: [id])
  plan      Plan              @relation(fields: [planId], references: [id])
}

model Attendance {
  id            String        @id @default(uuid())
  userId        String
  classId       String
  scheduleId    String?
  date          DateTime
  createdAt     DateTime      @default(now())
  user          User          @relation(fields: [userId], references: [id])
  class         ClassName     @relation(fields: [classId], references: [id])
  schedule      ClassSchedule? @relation(fields: [scheduleId], references: [id])
}

model ClassSchedule {
  id          String    @id @default(uuid())
  classId     String
  weekDay     WeekDay
  startTime   DateTime  // Hora de inicio
  endTime     DateTime  // Hora de fin
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  class       ClassName @relation(fields: [classId], references: [id])
  attendances Attendance[] // Opcional: para tracking específico por horario
}
